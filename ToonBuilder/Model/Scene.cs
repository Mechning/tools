using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Xml.Linq;

namespace ToonBuilder.Model
{
    public class XamlSerializer
    {
        public static void Save(SceneEditor scene, string fileName)
        {
            XDocument doc = scene.ToXaml();
        }

        public static XNamespace XamlPresentation = XNamespace.Get("http://schemas.microsoft.com/winfx/2006/xaml/presentation");
        public static XNamespace XamlExtensions = XNamespace.Get("http://schemas.microsoft.com/winfx/2006/xaml");
        public static XNamespace Xmlns = XNamespace.Get("http://www.w3.org/2000/xmlns/");
    }

    public class ToonSerializer
    {
        public static void Save(SceneEditor scene, string fileName)
        {

        }
    }

    public class Scene
    {
        public Scene()
        {
            this.Actors = new List<Actor>();
        }

        public List<Actor> Actors { get; set; }

    }

    // see http://www.isointeractive.com/index.asp?page_id=192
    public class Actor
    {
        public Actor()
        {
            Parts = new List<Part>();
        }

        public string Name { get; set; }

        public List<Part> Parts { get; set; }

        public int ZIndex { get; set; }

        public List<Movement> Movements { get; set; }
    }

    public class Part 
    {
        public string Name { get; set; }

        public List<Drawing> Drawings { get; set; }

        public int ZIndex { get; set; }
    }

    public class Drawing
    {
        public string Name { get; set; }
    }

    public class Movement
    {
        public string Name { get; set; }

        public string PartName { get; set; }

        public TimeSpan Duration { get; set; }

        public bool Repeat { get; set; }

        public bool AutoReverse { get; set; }
    }

    /// <summary>
    /// Fade or unfade a given part.
    /// </summary>
    public class OpacityMovement : Movement
    {
        public double FromOpacity { get; set; }
        public double ToOpacity { get; set; }
    }

    /// <summary>
    /// Move the entire part by the offset generated by the given circular movement.
    /// </summary>
    public class ArcMovement : Movement
    {
        public double StartAngle { get; set; }
        public double EndAngle { get; set; }
        public double Radius { get; set; }
    }

    /// <summary>
    /// Move the entire part by the offset generated by the given vector
    /// </summary>
    public class VectorMovement : Movement
    {
        public Vector Delta { get; set; }
    }

    /// <summary>
    /// Hinge two parts together so that as part 1 moves, part 2 tracks
    /// an anchor point within that part's movement.
    /// </summary>
    public class AnchoredMovement : Movement
    {

    }
}
